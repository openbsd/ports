$OpenBSD: patch-libsrc_Wi_bif_crypto_c,v 1.2 2021/10/19 06:26:04 tb Exp $

Index: libsrc/Wi/bif_crypto.c
--- libsrc/Wi/bif_crypto.c.orig
+++ libsrc/Wi/bif_crypto.c
@@ -824,6 +824,7 @@ bif_smime_sign (caddr_t * qst, caddr_t * err_ret, stat
   X509 *signer_cert = NULL;
   EVP_PKEY *signer_key = NULL;
   STACK_OF (X509) * certs = NULL;
+  STACK_OF (X509_OBJECT) * objs = NULL;
   int inx;
   char err_buf[512];
   char *ptr = NULL;
@@ -854,13 +855,15 @@ bif_smime_sign (caddr_t * qst, caddr_t * err_ret, stat
     }
 
   certs = sk_X509_new_null ();
-  if (store && store->objs)
+  if (store)
+    objs = X509_STORE_get0_objects(store);
+  if (objs)
     {
-      for (inx = 0; inx < sk_X509_OBJECT_num (store->objs); inx++)
+      for (inx = 0; inx < sk_X509_OBJECT_num (objs); inx++)
 	{
-	  X509_OBJECT *obj = sk_X509_OBJECT_value (store->objs, inx);
-	  if (obj->type == X509_LU_X509)
-	    sk_X509_push (certs, X509_dup (obj->data.x509));
+	  X509_OBJECT *obj = sk_X509_OBJECT_value (objs, inx);
+	  if (X509_OBJECT_get_type(obj) == X509_LU_X509)
+	    sk_X509_push (certs, X509_dup (X509_OBJECT_get0_X509(obj)));
 	}
 
     }
@@ -919,6 +922,7 @@ bif_smime_encrypt (caddr_t * qst, caddr_t * err_ret, s
   PKCS7 *p7 = NULL;
   X509_STORE *store = NULL;
   STACK_OF (X509) * certs = NULL;
+  STACK_OF (X509_OBJECT) * objs = NULL;
   int inx;
   char err_buf[512];
   char *ptr = NULL;
@@ -935,13 +939,15 @@ bif_smime_encrypt (caddr_t * qst, caddr_t * err_ret, s
     sqlr_new_error ("42000", "CR006", "No recipient certificates");
 
   certs = sk_X509_new_null ();
-  if (store && store->objs)
+  if (store)
+    objs = X509_STORE_get0_objects(store);
+  if (objs)
     {
-      for (inx = 0; inx < sk_X509_OBJECT_num (store->objs); inx++)
+      for (inx = 0; inx < sk_X509_OBJECT_num (objs); inx++)
 	{
-	  X509_OBJECT *obj = sk_X509_OBJECT_value (store->objs, inx);
-	  if (obj->type == X509_LU_X509)
-	    sk_X509_push (certs, X509_dup (obj->data.x509));
+	  X509_OBJECT *obj = sk_X509_OBJECT_value (objs, inx);
+	  if (X509_OBJECT_get_type(obj) == X509_LU_X509)
+	    sk_X509_push (certs, X509_dup (X509_OBJECT_get0_X509(obj)));
 	}
     }
   if (store)
@@ -1111,7 +1117,7 @@ x509_certificate_verify_cb (int ok, X509_STORE_CTX * c
   char *opts = (char *) X509_STORE_CTX_get_app_data (ctx);
   if (!ok && opts)
     {
-      switch (ctx->error)
+      switch (X509_STORE_CTX_get_error(ctx))
 	{
 	case X509_V_ERR_CERT_HAS_EXPIRED:
 	  if (strstr (opts, "expired"))
@@ -1208,7 +1214,7 @@ bif_x509_certificate_verify (caddr_t * qst, caddr_t * 
   if (!i)
     {
       const char *err_str;
-      err_str = X509_verify_cert_error_string (csc->error);
+      err_str = X509_verify_cert_error_string (X509_STORE_CTX_get_error(csc));
       *err_ret = srv_make_new_error ("22023", "CR015", "X509 error: %s", err_str);
     }
 
@@ -1419,7 +1425,7 @@ bif_get_certificate_info (caddr_t * qst, caddr_t * err
 	int i;
 	char tmp[1024];
 	char *ext_oid = (char *) (BOX_ELEMENTS (args) > 4 ? bif_string_arg (qst, args, 4, "get_certificate_info") : VIRT_CERT_EXT);
-	STACK_OF (X509_EXTENSION) * exts = cert->cert_info->extensions;
+	const STACK_OF (X509_EXTENSION) * exts = X509_get0_extensions(cert);
 	for (i = 0; i < sk_X509_EXTENSION_num (exts); i++)
 	  {
 	    X509_EXTENSION *ex = sk_X509_EXTENSION_value (exts, i);
@@ -1431,7 +1437,7 @@ bif_get_certificate_info (caddr_t * qst, caddr_t * err
 		char *data_ptr;
 		BIO *mem = BIO_new (BIO_s_mem ());
 		if (!X509V3_EXT_print (mem, ex, 0, 0))
-		  M_ASN1_OCTET_STRING_print (mem, ex->value);
+		  M_ASN1_OCTET_STRING_print (mem, X509_EXTENSION_get_data(ex));
 		len = BIO_get_mem_data (mem, &data_ptr);
 		if (len > 0 && data_ptr)
 		  {
@@ -1488,13 +1494,13 @@ bif_get_certificate_info (caddr_t * qst, caddr_t * err
 	int n, i, len;
 	char *s, *data_ptr;
 	BIO *mem = BIO_new (BIO_s_mem ());
-	for (i = 0; NULL != subj && i < sk_X509_NAME_ENTRY_num(subj->entries); i++)
+	for (i = 0; NULL != subj && i < X509_NAME_entry_count(subj); i++)
 	  {
-	    ne = sk_X509_NAME_ENTRY_value(subj->entries,i);
-	    n = OBJ_obj2nid (ne->object);
+	    ne = X509_NAME_get_entry(subj, i);
+	    n = OBJ_obj2nid (X509_NAME_ENTRY_get_object(ne));
 	    if ((n == NID_undef) || ((s = OBJ_nid2sn (n)) == NULL))
 	      {
-		i2t_ASN1_OBJECT (buffer, sizeof (buffer), ne->object);
+		i2t_ASN1_OBJECT (buffer, sizeof (buffer), X509_NAME_ENTRY_get_object(ne));
 		s = buffer;
 	      }
 	    if (!strcmp (s, attr))
@@ -1505,7 +1511,7 @@ bif_get_certificate_info (caddr_t * qst, caddr_t * err
 	  }
 	if (ne_ret)
 	  {
-	    ASN1_STRING_print (mem, ne_ret->value);
+	    ASN1_STRING_print (mem, X509_NAME_ENTRY_get_data(ne_ret));
 	    len = BIO_get_mem_data (mem, &data_ptr);
 	    if (len > 0 && data_ptr)
 	      {
@@ -1526,17 +1532,17 @@ bif_get_certificate_info (caddr_t * qst, caddr_t * err
 	dk_set_t set = NULL; 
 	caddr_t val;
 	BIO *mem = BIO_new (BIO_s_mem ());
-	for (i = 0; NULL != subj && i < sk_X509_NAME_ENTRY_num(subj->entries); i++)
+	for (i = 0; NULL != subj && i < X509_NAME_entry_count(subj); i++)
 	  {
 	    val = NULL;
-	    ne = sk_X509_NAME_ENTRY_value(subj->entries,i);
-	    n = OBJ_obj2nid (ne->object);
+	    ne = X509_NAME_get_entry(subj, i);
+	    n = OBJ_obj2nid (X509_NAME_ENTRY_get_object(ne));
 	    if ((n == NID_undef) || ((s = OBJ_nid2sn (n)) == NULL))
 	      {
-		i2t_ASN1_OBJECT (buffer, sizeof (buffer), ne->object);
+		i2t_ASN1_OBJECT (buffer, sizeof (buffer), X509_NAME_ENTRY_get_object(ne));
 		s = buffer;
 	      }
-	    ASN1_STRING_print (mem, ne->value);
+	    ASN1_STRING_print (mem, X509_NAME_ENTRY_get_data(ne));
 	    len = BIO_get_mem_data (mem, &data_ptr);
 	    if (len > 0 && data_ptr)
 	      {
