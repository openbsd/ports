$OpenBSD$

Index: src/3rdparty/chromium/components/crash/content/app/crashpad.h
--- src/3rdparty/chromium/components/crash/content/app/crashpad.h.orig
+++ src/3rdparty/chromium/components/crash/content/app/crashpad.h
@@ -22,7 +22,7 @@
 #include <windows.h>
 #endif
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 #include <signal.h>
 #endif
 
@@ -37,7 +37,7 @@ class CrashReportDatabase;
 
 namespace crash_reporter {
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // TODO(jperaza): Remove kEnableCrashpad and IsCrashpadEnabled() when Crashpad
 // is fully enabled on Linux.
 extern const char kEnableCrashpad[];
@@ -146,7 +146,7 @@ void RequestSingleCrashUpload(const std::string& local
 
 void DumpWithoutCrashing();
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
 // Logs message and immediately crashes the current process without triggering a
 // crash dump.
 void CrashWithoutDumping(const std::string& message);
@@ -188,7 +188,7 @@ bool DumpWithoutCrashingForClient(CrashReporterClient*
 void WhitelistMemoryRange(void* begin, size_t size);
 #endif  // OS_ANDROID
 
-#if defined(OS_LINUX)
+#if defined(OS_LINUX) || defined(OS_BSD)
 // Install a handler that gets a chance to handle faults before Crashpad. This
 // is used by V8 for trap-based bounds checks.
 void SetFirstChanceExceptionHandler(bool (*handler)(int, siginfo_t*, void*));
@@ -212,7 +212,7 @@ DWORD WINAPI DumpProcessForHungInputThread(void* param
 
 #endif  // defined(OS_WIN)
 
-#if defined(OS_LINUX) || defined(OS_ANDROID)
+#if defined(OS_LINUX) || defined(OS_ANDROID) || defined(OS_BSD)
 // Starts the handler process with an initial client connected on fd.
 // Returns `true` on success.
 bool StartHandlerForClient(int fd);
