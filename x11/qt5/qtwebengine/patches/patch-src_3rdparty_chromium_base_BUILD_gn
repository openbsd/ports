$OpenBSD$

Index: src/3rdparty/chromium/base/BUILD.gn
--- src/3rdparty/chromium/base/BUILD.gn.orig
+++ src/3rdparty/chromium/base/BUILD.gn
@@ -908,7 +908,7 @@ jumbo_component("base") {
       "timer/hi_res_timer_manager_posix.cc",
     ]
 
-    if (!is_nacl && !is_mac && !is_ios) {
+    if (!is_nacl && !is_mac && !is_ios && !is_openbsd) {
       sources += [
         "profiler/stack_copier_signal.cc",
         "profiler/stack_copier_signal.h",
@@ -917,6 +917,12 @@ jumbo_component("base") {
         "profiler/thread_delegate_posix.h",
       ]
     }
+
+    if (is_openbsd) {
+      sources += [
+        "profiler/stack_sampler_openbsd.cc",
+      ]
+    }
   }
 
   if (is_win) {
@@ -1267,6 +1273,11 @@ jumbo_component("base") {
   data = []
   data_deps = []
   libs = []
+    if (is_posix) {
+      libs += [
+        "kvm",
+      ]
+    }
 
   configs += [
     ":base_flags",
@@ -1328,7 +1339,7 @@ jumbo_component("base") {
         "allocator/allocator_shim_override_glibc_weak_symbols.h",
       ]
       deps += [ "//base/allocator:tcmalloc" ]
-    } else if (is_linux && use_allocator == "none") {
+    } else if ((is_linux && !is_openbsd) && use_allocator == "none") {
       sources += [ "allocator/allocator_shim_default_dispatch_to_glibc.cc" ]
     } else if (is_android && use_allocator == "none") {
       sources += [
@@ -1919,6 +1930,29 @@ jumbo_component("base") {
     }
   }
 
+  if (is_openbsd) {
+    sources -= [
+      "files/file_path_watcher_linux.cc",
+      "files/file_util_linux.cc",
+      "process/memory_linux.cc",
+      "process/process_linux.cc",
+      "system/sys_info_linux.cc",
+      "process/process_iterator_linux.cc",
+      "process/process_metrics_linux.cc",
+      "process/process_handle_linux.cc"
+    ]
+    sources += [
+      "process/memory_stubs.cc",
+      "process/process_handle_openbsd.cc",
+      "process/process_iterator_openbsd.cc",
+      "process/process_metrics_openbsd.cc",
+      "system/sys_info_openbsd.cc",
+      "files/file_path_watcher_kqueue.cc",
+      "files/file_path_watcher_kqueue.h",
+      "files/file_path_watcher_stub.cc",
+    ]
+  }
+
   # iOS
   if (is_ios) {
     sources -= [
@@ -2372,6 +2406,8 @@ if (is_win || is_mac) {
       ]
     }
   }
+
+  libs = [ "execinfo" ]
 }
 
 source_set("base_stack_sampling_profiler_test_util") {
