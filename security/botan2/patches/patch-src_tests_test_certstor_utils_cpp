$OpenBSD: patch-src_tests_test_certstor_utils_cpp,v 1.1 2021/10/05 05:32:30 tb Exp $

Use ISRG Root X1 instead of DST Root CA X3

Index: src/tests/test_certstor_utils.cpp
--- src/tests/test_certstor_utils.cpp.orig
+++ src/tests/test_certstor_utils.cpp
@@ -24,13 +24,13 @@ Botan::X509_DN read_dn(const std::string hex)
 
 Botan::X509_DN get_dn()
    {
-   // ASN.1 encoded subject DN of "DST Root CA X3"
+   // ASN.1 encoded subject DN of "ISRG Root X1"
    // This certificate is in the standard "System Roots" of any macOS setup,
    // serves as the trust root of botan.randombit.net and expires on
-   // Thursday, 30. September 2021 at 16:01:15 Central European Summer Time
-   return read_dn("303f31243022060355040a131b4469676974616c205369676e6174757265"
-                  "20547275737420436f2e311730150603550403130e44535420526f6f7420"
-                  "4341205833");
+   // Monday, 4. June 2035 at 11:04:38 UTC
+   return read_dn("304f310b300906035504061302555331293027060355040a1320496e7465"
+                  "726e65742053656375726974792052657365617263682047726f75703115"
+                  "30130603550403130c4953524720526f6f74205831");
    }
 
 Botan::X509_DN get_utf8_dn()
@@ -46,7 +46,7 @@ Botan::X509_DN get_utf8_dn()
 std::vector<uint8_t> get_key_id()
    {
    // this is the same as the public key SHA1
-   return Botan::hex_decode("c4a7b1a47b2c71fadbe14b9075ffc41560858910");
+   return Botan::hex_decode("79b459e67bb6e5e40173800888c81a58f6e99b6e");
    }
 
 Botan::X509_DN get_unknown_dn()
@@ -66,9 +66,10 @@ Botan::X509_DN get_skewed_dn()
    // according to Apple's idea of a normalized PrintableString field:
    //   (1) It has leading and trailing white space
    //   (2) It contains multiple spaces between 'words'
-   return read_dn("304b312a3028060355040a132120204469676974616c2020205369676e61"
-                  "7475726520547275737420436f2e2020311d301b06035504031314202044"
-                  "5354202020526f6f742043412058332020");
+   return read_dn("3057310b300906035504061302555331333031060355040a132a2020496e"
+                  "7465726e6574202020536563757269747920202052657365617263682020"
+                  "2047726f75702020311c301a0603550403130c2020495352472020526f6f"
+                  "7420202058312020");
    }
 
 std::vector<uint8_t> get_unknown_key_id()
