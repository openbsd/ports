$OpenBSD: patch-gdb_ppc64-obsd-tdep_c,v 1.1 2021/10/22 18:30:36 jca Exp $

Index: gdb/ppc64-obsd-tdep.c
--- gdb/ppc64-obsd-tdep.c.orig
+++ gdb/ppc64-obsd-tdep.c
@@ -0,0 +1,411 @@
+/* Target-dependent code for OpenBSD/powerpc64.
+
+   Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.
+
+   This file is part of GDB.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 51 Franklin Street, Fifth Floor,
+   Boston, MA 02110-1301, USA.  */
+
+#include "defs.h"
+#include "gdbarch.h"
+#include "arch-utils.h"
+#include "floatformat.h"
+#include "frame.h"
+#include "frame-unwind.h"
+#include "osabi.h"
+#include "regcache.h"
+#include "regset.h"
+#include "symtab.h"
+#include "trad-frame.h"
+
+#include "obsd-tdep.h"
+#include "ppc-tdep.h"
+#include "ppc64-obsd-tdep.h"
+#include "solib-svr4.h"
+
+/* Register offsets from <machine/reg.h>.  */
+struct ppc_reg_offsets ppc64obsd_reg_offsets;
+struct ppc_reg_offsets ppc64obsd_fpreg_offsets;
+
+
+/* Register set support functions.  */
+
+static void
+ppc64_supply_reg (struct regcache *regcache, int regnum, 
+		  const gdb_byte *regs, size_t offset)
+{
+  if (regnum != -1 && offset != -1)
+    regcache->raw_supply (regnum, regs + offset);
+}
+
+static void
+ppc64_collect_reg (const struct regcache *regcache, int regnum,
+		   gdb_byte *regs, size_t offset)
+{
+  if (regnum != -1 && offset != -1)
+    regcache->raw_collect (regnum, regs + offset);
+}
+    
+/* Supply register REGNUM in the general-purpose register set REGSET
+   from the buffer specified by GREGS and LEN to register cache
+   REGCACHE.  If REGNUM is -1, do this for all registers in REGSET.  */
+
+static void
+ppc64_supply_gregset (const struct regset *regset, struct regcache *regcache,
+		      int regnum, const void *gregs, size_t len)
+{
+  struct gdbarch *gdbarch = regcache->arch ();
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  const struct ppc_reg_offsets *offsets
+    = (const struct ppc_reg_offsets *) regset->regmap;
+  size_t offset;
+  int i;
+
+  for (i = tdep->ppc_gp0_regnum, offset = offsets->r0_offset;
+       i < tdep->ppc_gp0_regnum + ppc_num_gprs;
+       i++, offset += 8)
+    {
+      if (regnum == -1 || regnum == i)
+	ppc64_supply_reg (regcache, i, (const gdb_byte *) gregs, offset);
+    }
+
+  if (regnum == -1 || regnum == gdbarch_pc_regnum (gdbarch))
+    ppc64_supply_reg (regcache, gdbarch_pc_regnum (gdbarch),
+		      (const gdb_byte *) gregs, offsets->pc_offset);
+  if (regnum == -1 || regnum == tdep->ppc_ps_regnum)
+    ppc64_supply_reg (regcache, tdep->ppc_ps_regnum,
+		      (const gdb_byte *) gregs, offsets->ps_offset);
+  if (regnum == -1 || regnum == tdep->ppc_cr_regnum)
+    ppc64_supply_reg (regcache, tdep->ppc_cr_regnum,
+		      (const gdb_byte *) gregs, offsets->cr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_lr_regnum)
+    ppc64_supply_reg (regcache, tdep->ppc_lr_regnum,
+		      (const gdb_byte *) gregs, offsets->lr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_ctr_regnum)
+    ppc64_supply_reg (regcache, tdep->ppc_ctr_regnum,
+		      (const gdb_byte *) gregs, offsets->ctr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_xer_regnum)
+    ppc64_supply_reg (regcache, tdep->ppc_xer_regnum,
+		      (const gdb_byte *) gregs, offsets->cr_offset);
+}
+
+/* Collect register REGNUM in the general-purpose register set
+   REGSET. from register cache REGCACHE into the buffer specified by
+   GREGS and LEN.  If REGNUM is -1, do this for all registers in
+   REGSET.  */
+
+static void
+ppc64_collect_gregset (const struct regset *regset,
+		       const struct regcache *regcache,
+		       int regnum, void *gregs, size_t len)
+{
+  struct gdbarch *gdbarch = regcache->arch ();
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  const struct ppc_reg_offsets *offsets
+    = (const struct ppc_reg_offsets *) regset->regmap;
+  size_t offset;
+  int i;
+
+  offset = offsets->r0_offset;
+  for (i = tdep->ppc_gp0_regnum;
+       i < tdep->ppc_gp0_regnum + ppc_num_gprs;
+       i++, offset += 8)
+    {
+      if (regnum == -1 || regnum == i)
+	ppc64_collect_reg (regcache, i, (gdb_byte *) gregs, offset);
+    }
+
+  if (regnum == -1 || regnum == gdbarch_pc_regnum (gdbarch))
+    ppc64_collect_reg (regcache, gdbarch_pc_regnum (gdbarch),
+		       (gdb_byte *) gregs, offsets->pc_offset);
+  if (regnum == -1 || regnum == tdep->ppc_ps_regnum)
+    ppc64_collect_reg (regcache, tdep->ppc_ps_regnum,
+		       (gdb_byte *) gregs, offsets->ps_offset);
+  if (regnum == -1 || regnum == tdep->ppc_cr_regnum)
+    ppc64_collect_reg (regcache, tdep->ppc_cr_regnum,
+		       (gdb_byte *) gregs, offsets->cr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_lr_regnum)
+    ppc64_collect_reg (regcache, tdep->ppc_lr_regnum,
+		       (gdb_byte *) gregs, offsets->lr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_ctr_regnum)
+    ppc64_collect_reg (regcache, tdep->ppc_ctr_regnum,
+		       (gdb_byte *) gregs, offsets->ctr_offset);
+  if (regnum == -1 || regnum == tdep->ppc_xer_regnum)
+    ppc64_collect_reg (regcache, tdep->ppc_xer_regnum,
+		       (gdb_byte *) gregs, offsets->xer_offset);
+}
+
+/* Core file support.  */
+
+/* Supply register REGNUM in the general-purpose register set REGSET
+   from the buffer specified by GREGS and LEN to register cache
+   REGCACHE.  If REGNUM is -1, do this for all registers in REGSET.  */
+
+void
+ppc64obsd_supply_gregset (const struct regset *regset,
+			  struct regcache *regcache, int regnum,
+			  const void *gregs, size_t len)
+{
+  ppc64_supply_gregset (regset, regcache, regnum, gregs, len);
+}
+
+/* Collect register REGNUM in the general-purpose register set
+   REGSET. from register cache REGCACHE into the buffer specified by
+   GREGS and LEN.  If REGNUM is -1, do this for all registers in
+   REGSET.  */
+
+void
+ppc64obsd_collect_gregset (const struct regset *regset,
+			   const struct regcache *regcache, int regnum,
+			   void *gregs, size_t len)
+{
+  ppc64_collect_gregset (regset, regcache, regnum, gregs, len);
+}
+
+/* OpenBSD/powerpc register set.  */
+
+struct regset ppc64obsd_gregset =
+{
+  &ppc64obsd_reg_offsets,
+  ppc64obsd_supply_gregset
+};
+
+struct regset ppc64obsd_fpregset =
+{
+  &ppc64obsd_fpreg_offsets,
+  ppc_supply_fpregset
+};
+
+/* Iterate over core file register note sections.  */
+
+static void
+ppc64obsd_iterate_over_regset_sections (struct gdbarch *gdbarch,
+					iterate_over_regset_sections_cb *cb,
+					void *cb_data,
+					const struct regcache *regcache)
+{
+  cb (".reg", 304, 304, &ppc64obsd_gregset, NULL, cb_data);
+  cb (".reg2", 1056, 1056, &ppc64obsd_fpregset, NULL, cb_data);
+}
+
+
+/* Signal trampolines.  */
+
+/* Since OpenBSD 3.2, the sigtramp routine is mapped at a random page
+   in virtual memory.  The randomness makes it somewhat tricky to
+   detect it, but fortunately we can rely on the fact that the start
+   of the sigtramp routine is page-aligned.  We recognize the
+   trampoline by looking for the code that invokes the sigreturn
+   system call.  The offset where we can find that code varies from
+   release to release.
+
+   By the way, the mapping mentioned above is read-only, so you cannot
+   place a breakpoint in the signal trampoline.  */
+
+/* Default page size.  */
+static const int ppc64obsd_page_size = 4096;
+
+/* Offset for sigreturn(2).  */
+static const int ppc64obsd_sigreturn_offset[] = {
+  0x10,				/* OpenBSD 6.8 */
+  -1
+};
+
+static int
+ppc64obsd_sigtramp_frame_sniffer (const struct frame_unwind *self,
+				  struct frame_info *this_frame,
+				  void **this_cache)
+{
+  struct gdbarch *gdbarch = get_frame_arch (this_frame);
+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
+  CORE_ADDR pc = get_frame_pc (this_frame);
+  CORE_ADDR start_pc = (pc & ~(ppc64obsd_page_size - 1));
+  const int *offset;
+  const char *name;
+
+  find_pc_partial_function (pc, &name, NULL, NULL);
+  if (name)
+    return 0;
+
+  for (offset = ppc64obsd_sigreturn_offset; *offset != -1; offset++)
+    {
+      gdb_byte buf[2 * PPC_INSN_SIZE];
+      unsigned long insn;
+
+      if (!safe_frame_unwind_memory (this_frame, start_pc + *offset,
+				     buf, sizeof buf))
+	continue;
+
+      /* Check for "li r0,SYS_sigreturn".  */
+      insn = extract_unsigned_integer (buf, PPC_INSN_SIZE, byte_order);
+      if (insn != 0x38000067)
+	continue;
+
+      /* Check for "sc".  */
+      insn = extract_unsigned_integer (buf + PPC_INSN_SIZE,
+				       PPC_INSN_SIZE, byte_order);
+      if (insn != 0x44000002)
+	continue;
+
+      return 1;
+    }
+
+  return 0;
+}
+
+static struct trad_frame_cache *
+ppc64obsd_sigtramp_frame_cache (struct frame_info *this_frame,
+				void **this_cache)
+{
+  struct gdbarch *gdbarch = get_frame_arch (this_frame);
+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);
+  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);
+  struct trad_frame_cache *cache;
+  CORE_ADDR addr, base, func;
+  gdb_byte buf[PPC_INSN_SIZE];
+  unsigned long insn, sigcontext_offset;
+  int i;
+
+  if (*this_cache)
+    return (struct trad_frame_cache *) *this_cache;
+
+  cache = trad_frame_cache_zalloc (this_frame);
+  *this_cache = cache;
+
+  func = get_frame_pc (this_frame);
+  func &= ~(ppc64obsd_page_size - 1);
+  if (!safe_frame_unwind_memory (this_frame, func, buf, sizeof buf))
+    return cache;
+
+  /* Calculate the offset where we can find `struct sigcontext'.  We
+     base our calculation on the amount of stack space reserved by the
+     first instruction of the signal trampoline.  */
+  insn = extract_unsigned_integer (buf, PPC_INSN_SIZE, byte_order);
+  sigcontext_offset = (0x10000 - (insn & 0x0000ffff)) + 8;
+
+  base = get_frame_register_unsigned (this_frame, gdbarch_sp_regnum (gdbarch));
+  addr = base + sigcontext_offset + 2 * tdep->wordsize;
+  for (i = 0; i < ppc_num_gprs; i++, addr += tdep->wordsize)
+    {
+      int regnum = i + tdep->ppc_gp0_regnum;
+      trad_frame_set_reg_addr (cache, regnum, addr);
+    }
+  trad_frame_set_reg_addr (cache, tdep->ppc_lr_regnum, addr);
+  addr += tdep->wordsize;
+  trad_frame_set_reg_addr (cache, tdep->ppc_cr_regnum, addr);
+  addr += tdep->wordsize;
+  trad_frame_set_reg_addr (cache, tdep->ppc_xer_regnum, addr);
+  addr += tdep->wordsize;
+  trad_frame_set_reg_addr (cache, tdep->ppc_ctr_regnum, addr);
+  addr += tdep->wordsize;
+  trad_frame_set_reg_addr (cache, gdbarch_pc_regnum (gdbarch), addr);
+  /* SRR0?  */
+  addr += tdep->wordsize;
+
+  /* Construct the frame ID using the function start.  */
+  trad_frame_set_id (cache, frame_id_build (base, func));
+
+  return cache;
+}
+
+static void
+ppc64obsd_sigtramp_frame_this_id (struct frame_info *this_frame,
+				void **this_cache, struct frame_id *this_id)
+{
+  struct trad_frame_cache *cache =
+    ppc64obsd_sigtramp_frame_cache (this_frame, this_cache);
+
+  trad_frame_get_id (cache, this_id);
+}
+
+static struct value *
+ppc64obsd_sigtramp_frame_prev_register (struct frame_info *this_frame,
+					void **this_cache, int regnum)
+{
+  struct trad_frame_cache *cache =
+    ppc64obsd_sigtramp_frame_cache (this_frame, this_cache);
+
+  return trad_frame_get_register (cache, this_frame, regnum);
+}
+
+static const struct frame_unwind ppc64obsd_sigtramp_frame_unwind = {
+  SIGTRAMP_FRAME,
+  default_frame_unwind_stop_reason,
+  ppc64obsd_sigtramp_frame_this_id,
+  ppc64obsd_sigtramp_frame_prev_register,
+  NULL,
+  ppc64obsd_sigtramp_frame_sniffer
+};
+
+
+static void
+ppc64obsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)
+{
+  obsd_init_abi (info, gdbarch);
+
+  /* OpenBSD doesn't support the 128-bit `long double' from the psABI.  */
+  set_gdbarch_long_double_bit (gdbarch, 64);
+  set_gdbarch_long_double_format (gdbarch, floatformats_ieee_double);
+
+  /* OpenBSD uses SVR4-style shared libraries.  */
+  set_solib_svr4_fetch_link_map_offsets
+    (gdbarch, svr4_lp64_fetch_link_map_offsets);
+
+  set_gdbarch_iterate_over_regset_sections
+    (gdbarch, ppc64obsd_iterate_over_regset_sections);
+
+  frame_unwind_append_unwinder (gdbarch, &ppc64obsd_sigtramp_frame_unwind);
+}
+
+
+/* Provide a prototype to silence -Wmissing-prototypes.  */
+void _initialize_ppc64obsd_tdep (void);
+
+void
+_initialize_ppc64obsd_tdep (void)
+{
+  gdbarch_register_osabi (bfd_arch_rs6000, 0, GDB_OSABI_OPENBSD,
+			  ppc64obsd_init_abi);
+  gdbarch_register_osabi (bfd_arch_powerpc, bfd_mach_ppc64,
+			  GDB_OSABI_OPENBSD, ppc64obsd_init_abi);
+
+  /* Avoid initializing the register offsets again if they were
+     already initailized by ppc64obsd-nat.c.  */
+  if (ppc64obsd_reg_offsets.pc_offset == 0)
+    {
+      /* General-purpose registers.  */
+      ppc64obsd_reg_offsets.r0_offset = 0;
+      ppc64obsd_reg_offsets.pc_offset = 288;
+      ppc64obsd_reg_offsets.ps_offset = 296;
+      ppc64obsd_reg_offsets.cr_offset = 264;
+      ppc64obsd_reg_offsets.lr_offset = 256;
+      ppc64obsd_reg_offsets.ctr_offset = 280;
+      ppc64obsd_reg_offsets.xer_offset = 272;
+      ppc64obsd_reg_offsets.mq_offset = -1;
+
+      /* Floating-point registers.  */
+      ppc64obsd_reg_offsets.f0_offset = -1;
+      ppc64obsd_reg_offsets.fpscr_offset = -1;
+    }
+
+  if (ppc64obsd_fpreg_offsets.fpscr_offset == 0)
+    {
+      /* Floating-point registers.  */
+      ppc64obsd_fpreg_offsets.f0_offset = -1;
+      ppc64obsd_fpreg_offsets.fpscr_offset = -1;
+      ppc64obsd_fpreg_offsets.fpscr_size = 8;
+    }
+}
