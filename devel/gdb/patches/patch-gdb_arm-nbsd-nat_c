$OpenBSD: patch-gdb_arm-nbsd-nat_c,v 1.1 2021/10/22 18:30:36 jca Exp $

Index: gdb/arm-nbsd-nat.c
--- gdb/arm-nbsd-nat.c.orig
+++ gdb/arm-nbsd-nat.c
@@ -69,9 +69,9 @@ arm_supply_fparegset (struct regcache *regcache, struc
 
   for (regno = ARM_F0_REGNUM; regno <= ARM_F7_REGNUM; regno++)
     regcache->raw_supply (regno,
-			  (char *) &fparegset->fpr[regno - ARM_F0_REGNUM]);
+			  (char *) &fparegset->fp_reg[regno - ARM_F0_REGNUM]);
 
-  regcache->raw_supply (ARM_FPS_REGNUM, (char *) &fparegset->fpr_fpsr);
+  regcache->raw_supply (ARM_FPS_REGNUM, (char *) &fparegset->fp_scr);
 }
 
 static void
@@ -160,12 +160,12 @@ fetch_fp_register (struct regcache *regcache, int regn
     {
     case ARM_FPS_REGNUM:
       regcache->raw_supply (ARM_FPS_REGNUM,
-			    (char *) &inferior_fp_registers.fpr_fpsr);
+			    (char *) &inferior_fp_registers.fp_scr);
       break;
 
     default:
       regcache->raw_supply
-	(regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);
+	(regno, (char *) &inferior_fp_registers.fp_reg[regno - ARM_F0_REGNUM]);
       break;
     }
 }
@@ -190,7 +190,7 @@ fetch_fp_regs (struct regcache *regcache)
 }
 
 void
-arm_nbsd_nat_target::fetch_registers (struct regcache *regcache, int regno)
+arm_netbsd_nat_target::fetch_registers (struct regcache *regcache, int regno)
 {
   if (regno >= 0)
     {
@@ -340,12 +340,12 @@ store_fp_register (const struct regcache *regcache, in
     {
     case ARM_FPS_REGNUM:
       regcache->raw_collect (ARM_FPS_REGNUM,
-			     (char *) &inferior_fp_registers.fpr_fpsr);
+			     (char *) &inferior_fp_registers.fp_scr);
       break;
 
     default:
       regcache->raw_collect
-	(regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);
+	(regno, (char *) &inferior_fp_registers.fp_reg[regno - ARM_F0_REGNUM]);
       break;
     }
 
@@ -366,10 +366,10 @@ store_fp_regs (const struct regcache *regcache)
 
   for (regno = ARM_F0_REGNUM; regno <= ARM_F7_REGNUM; regno++)
     regcache->raw_collect
-      (regno, (char *) &inferior_fp_registers.fpr[regno - ARM_F0_REGNUM]);
+      (regno, (char *) &inferior_fp_registers.fp_reg[regno - ARM_F0_REGNUM]);
 
   regcache->raw_collect (ARM_FPS_REGNUM,
-			 (char *) &inferior_fp_registers.fpr_fpsr);
+			 (char *) &inferior_fp_registers.fp_scr);
 
   ret = ptrace (PT_SETFPREGS, regcache->ptid ().pid (),
 		(PTRACE_TYPE_ARG3) &inferior_fp_registers, 0);
@@ -379,7 +379,7 @@ store_fp_regs (const struct regcache *regcache)
 }
 
 void
-arm_nbsd_nat_target::store_registers (struct regcache *regcache, int regno)
+arm_netbsd_nat_target::store_registers (struct regcache *regcache, int regno)
 {
   if (regno >= 0)
     {
